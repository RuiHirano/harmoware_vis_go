{"version":3,"sources":["views/harmoware.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["socket","io","Harmoware","this","props","Container","HarmowarePage","actions","viewport","depotsData","movesbase","movedData","routePaths","clickedObject","useState","setMovesdata","useEffect","on","data","time","Date","now","newMovesbase","movesdata","forEach","movedata","isExist","color","value","JSON","parse","id","type","latitude","longitude","push","operation","elapsedtime","position","updateMovesBase","setAgents","console","log","process","setViewport","width","window","screen","height","zoom","setSecPerHour","setLeading","setTrailing","className","mapboxApiAccessToken","layers","connectToHarmowareVis","store","createStore","getCombinedReducer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yVAKMA,E,MAAgCC,KAEhCC,E,uKAEE,OAAQ,cAAC,EAAD,eAAmBC,KAAKC,Y,GAFhBC,KAMlBC,EAAmD,SAACF,GAAW,IACzDG,EAAmFH,EAAnFG,QAAqBC,GAA8DJ,EAA1EK,WAA0EL,EAA9DI,UADmC,GAC2BJ,EAApDM,UAAoDN,EAAzCO,UAAyCP,EAA9BQ,WAA8BR,EAAlBS,cAEvCC,mBAAsB,KAHQ,mBAG9CC,GAH8C,WA+EhE,OApBAC,qBAAU,WACNhB,EAAOiB,GAAG,UAAU,SAACC,GAAD,OAvDN,SAACA,GACf,IAAMC,EAAOC,KAAKC,MAAQ,IACpBC,EAA4B,GAElCP,GAAa,SAACQ,GA6CV,OA3CAA,EAAUC,SAAQ,SAACC,GACf,IAAIC,GAAU,EACVC,EAAQ,CAAC,EAAG,IAAK,KACrBT,EAAKM,SAAQ,SAACI,GAAgB,IAAD,EACiBC,KAAKC,MAC3CF,GADUG,GADW,EACjBC,KADiB,EACXD,IAAIE,EADO,EACPA,SAAUC,EADH,EACGA,UAIxBH,IAAON,EAASO,OAGhBV,EAAaa,KAAb,2BACOV,GADP,IAEIW,UAAU,GAAD,mBACFX,EAASW,WADP,CAEL,CACIC,YAAalB,EACbmB,SAAU,CAACJ,EAAWD,EAAU,GAChCN,cAIZD,GAAU,GAETA,GAGDJ,EAAaa,KAAK,CACdH,KAAMD,EACNK,UAAW,CACP,CACIC,YAAalB,EACbmB,SAAU,CAACJ,EAAWD,EAAU,GAChCN,MAPA,CAAC,EAAG,IAAK,aAiB1BL,KAEXf,EAAQgC,gBAAgBjB,GAIWkB,CAAUtB,MAG7CuB,QAAQC,IAAIC,oIACRpC,IACAA,EAAQqC,YAAR,2BACOxC,EAAMI,UADb,IAEI0B,UAAW,YACXD,SAAU,WACVY,MAAOC,OAAOC,OAAOF,MACrBG,OAAQF,OAAOC,OAAOC,OACtBC,KAAM,MAEV1C,EAAQ2C,cAAc,MACtB3C,EAAQ4C,WAAW,GACnB5C,EAAQ6C,YAAY,MAEzB,IAGC,qBAAKC,UAAU,MAAf,SACI,cAAC,IAAD,CACI7C,SAAUA,EAAUD,QAASA,EAC7B+C,qBA5FK,+FA6FLC,OAAQ,QAQTC,cAAsBtD,GC/F/BuD,EAAQC,YAAYC,eAWXC,MATf,WACE,OAEE,cAAC,IAAD,CAAUH,MAAOA,EAAjB,SACE,cAAC,EAAD,OCFSI,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.02973368.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { HarmoVisLayers, Container, BasedProps, BasedState, connectToHarmowareVis, MovesLayer, Movesbase, MovesbaseOperation, DepotsLayer, DepotsData, LineMapLayer, LineMapData } from 'harmoware-vis';\nimport io from \"socket.io-client\";\n\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoicnVpaGlyYW5vIiwiYSI6ImNqdmc0bXJ0dTAzZDYzem5vMmk0ejQ0engifQ.3k045idIb4JNvawjppzqZA'\nconst socket: SocketIOClient.Socket = io();\n\nclass Harmoware extends Container<BasedProps & BasedState> {\n    render() {\n        return (<HarmowarePage {...this.props} />)\n    }\n}\n\nconst HarmowarePage: React.FC<BasedProps & BasedState> = (props) => {\n    const { actions, depotsData, viewport, movesbase, movedData, routePaths, clickedObject } = props\n\n    const [movesdata, setMovesdata] = useState<Movesbase[]>([])\n\n    const setAgents = (data: any) => {\n        const time = Date.now() / 1000; // set time as now. (If data have time, ..)\n        const newMovesbase: Movesbase[] = [];\n        // useEffect内では外側のstateは初期化時のままなので、set関数内で過去のstateを取得する必要がある\n        setMovesdata((movesdata) => {\n            //console.log(\"socketData: \", movesdata);\n            movesdata.forEach((movedata) => {\n                let isExist = false;\n                let color = [0, 200, 120];\n                data.forEach((value: any) => {\n                    const { type, id, latitude, longitude } = JSON.parse(\n                        value\n                    );\n                    //console.log(\"id, type: \", id, movedata.type)\n                    if (id === movedata.type) {\n                        //console.log(\"match\")\n                        // 存在する場合、更新\n                        newMovesbase.push({\n                            ...movedata,\n                            operation: [\n                                ...movedata.operation,\n                                {\n                                    elapsedtime: time,\n                                    position: [longitude, latitude, 0],\n                                    color\n                                }\n                            ]\n                        });\n                        isExist = true\n                    }\n                    if (!isExist) {\n                        // 存在しない場合、新規作成\n                        let color = [0, 255, 0];\n                        newMovesbase.push({\n                            type: id,\n                            operation: [\n                                {\n                                    elapsedtime: time,\n                                    position: [longitude, latitude, 0],\n                                    color\n                                }\n                            ]\n                        });\n                    }\n\n                })\n            })\n\n\n            return newMovesbase\n        })\n        actions.updateMovesBase(newMovesbase);\n    }\n\n    useEffect(() => {\n        socket.on(\"agents\", (data: any) => setAgents(data));\n\n\n        console.log(process.env);\n        if (actions) {\n            actions.setViewport({\n                ...props.viewport,\n                longitude: 136.9831702,\n                latitude: 35.1562909,\n                width: window.screen.width,\n                height: window.screen.height,\n                zoom: 16\n            })\n            actions.setSecPerHour(3600);\n            actions.setLeading(2)\n            actions.setTrailing(5)\n        }\n    }, [])\n\n    return (\n        <div className=\"App\">\n            <HarmoVisLayers\n                viewport={viewport} actions={actions}\n                mapboxApiAccessToken={MAPBOX_TOKEN}\n                layers={[\n\n                ]}\n            />\n        </div>\n    );\n}\n\nexport default connectToHarmowareVis(Harmoware);","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport { getCombinedReducer } from 'harmoware-vis';\nimport { Harmoware } from './views'\n\n\n\nconst store = createStore(getCombinedReducer());\n\nfunction App() {\n  return (\n\n    <Provider store={store}>\n      <Harmoware />\n    </Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}