[{"/Users/ruihirano/MyProjects/LabProjects/harmoware_vis_go/src/index.tsx":"1","/Users/ruihirano/MyProjects/LabProjects/harmoware_vis_go/src/reportWebVitals.ts":"2","/Users/ruihirano/MyProjects/LabProjects/harmoware_vis_go/src/App.tsx":"3","/Users/ruihirano/MyProjects/LabProjects/harmoware_vis_go/src/views/index.ts":"4","/Users/ruihirano/MyProjects/LabProjects/harmoware_vis_go/src/views/harmoware.tsx":"5"},{"size":500,"mtime":1607221547619,"results":"6","hashOfConfig":"7"},{"size":425,"mtime":1607221547620,"results":"8","hashOfConfig":"7"},{"size":418,"mtime":1607227337045,"results":"9","hashOfConfig":"7"},{"size":51,"mtime":1607227332739,"results":"10","hashOfConfig":"7"},{"size":3862,"mtime":1607228375967,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"o3mbd7",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"/Users/ruihirano/MyProjects/LabProjects/harmoware_vis_go/src/index.tsx",[],["25","26"],"/Users/ruihirano/MyProjects/LabProjects/harmoware_vis_go/src/reportWebVitals.ts",[],"/Users/ruihirano/MyProjects/LabProjects/harmoware_vis_go/src/App.tsx",["27"],"import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport { getCombinedReducer } from 'harmoware-vis';\nimport { Harmoware } from './views'\n\n\n\nconst store = createStore(getCombinedReducer());\n\nfunction App() {\n  return (\n\n    <Provider store={store}>\n      <Harmoware />\n    </Provider>\n  );\n}\n\nexport default App;\n","/Users/ruihirano/MyProjects/LabProjects/harmoware_vis_go/src/views/index.ts",[],"/Users/ruihirano/MyProjects/LabProjects/harmoware_vis_go/src/views/harmoware.tsx",["28","29","30","31","32","33","34","35","36","37","38","39","40","41"],"import React, { useEffect, useState } from 'react';\nimport { HarmoVisLayers, Container, BasedProps, BasedState, connectToHarmowareVis, MovesLayer, Movesbase, MovesbaseOperation, DepotsLayer, DepotsData, LineMapLayer, LineMapData } from 'harmoware-vis';\nimport io from \"socket.io-client\";\n\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoicnVpaGlyYW5vIiwiYSI6ImNqdmc0bXJ0dTAzZDYzem5vMmk0ejQ0engifQ.3k045idIb4JNvawjppzqZA'\nconst socket: SocketIOClient.Socket = io();\n\nclass Harmoware extends Container<BasedProps & BasedState> {\n    render() {\n        return (<HarmowarePage {...this.props} />)\n    }\n}\n\nconst HarmowarePage: React.FC<BasedProps & BasedState> = (props) => {\n    const { actions, depotsData, viewport, movesbase, movedData, routePaths, clickedObject } = props\n\n    const [movesdata, setMovesdata] = useState<Movesbase[]>([])\n\n    const setAgents = (data: any) => {\n        const time = Date.now() / 1000; // set time as now. (If data have time, ..)\n        const newMovesbase: Movesbase[] = [];\n        // useEffect内では外側のstateは初期化時のままなので、set関数内で過去のstateを取得する必要がある\n        setMovesdata((movesdata) => {\n            //console.log(\"socketData: \", movesdata);\n            movesdata.forEach((movedata) => {\n                let isExist = false;\n                let color = [0, 200, 120];\n                data.forEach((value: any) => {\n                    const { type, id, latitude, longitude } = JSON.parse(\n                        value\n                    );\n                    //console.log(\"id, type: \", id, movedata.type)\n                    if (id === movedata.type) {\n                        //console.log(\"match\")\n                        // 存在する場合、更新\n                        newMovesbase.push({\n                            ...movedata,\n                            operation: [\n                                ...movedata.operation,\n                                {\n                                    elapsedtime: time,\n                                    position: [longitude, latitude, 0],\n                                    color\n                                }\n                            ]\n                        });\n                        isExist = true\n                    }\n                    if (!isExist) {\n                        // 存在しない場合、新規作成\n                        let color = [0, 255, 0];\n                        newMovesbase.push({\n                            type: id,\n                            operation: [\n                                {\n                                    elapsedtime: time,\n                                    position: [longitude, latitude, 0],\n                                    color\n                                }\n                            ]\n                        });\n                    }\n\n                })\n            })\n\n\n            return newMovesbase\n        })\n        actions.updateMovesBase(newMovesbase);\n    }\n\n    useEffect(() => {\n        socket.on(\"agents\", (data: any) => setAgents(data));\n\n\n        console.log(process.env);\n        if (actions) {\n            actions.setViewport({\n                ...props.viewport,\n                longitude: 136.9831702,\n                latitude: 35.1562909,\n                width: window.screen.width,\n                height: window.screen.height,\n                zoom: 16\n            })\n            actions.setSecPerHour(3600);\n            actions.setLeading(2)\n            actions.setTrailing(5)\n        }\n    }, [])\n\n    return (\n        <div className=\"App\">\n            <HarmoVisLayers\n                viewport={viewport} actions={actions}\n                mapboxApiAccessToken={MAPBOX_TOKEN}\n                layers={[\n\n                ]}\n            />\n        </div>\n    );\n}\n\nexport default connectToHarmowareVis(Harmoware);",{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":2,"column":8,"nodeType":"48","messageId":"49","endLine":2,"endColumn":12},{"ruleId":"46","severity":1,"message":"50","line":2,"column":84,"nodeType":"48","messageId":"49","endLine":2,"endColumn":94},{"ruleId":"46","severity":1,"message":"51","line":2,"column":107,"nodeType":"48","messageId":"49","endLine":2,"endColumn":125},{"ruleId":"46","severity":1,"message":"52","line":2,"column":127,"nodeType":"48","messageId":"49","endLine":2,"endColumn":138},{"ruleId":"46","severity":1,"message":"53","line":2,"column":140,"nodeType":"48","messageId":"49","endLine":2,"endColumn":150},{"ruleId":"46","severity":1,"message":"54","line":2,"column":152,"nodeType":"48","messageId":"49","endLine":2,"endColumn":164},{"ruleId":"46","severity":1,"message":"55","line":2,"column":166,"nodeType":"48","messageId":"49","endLine":2,"endColumn":177},{"ruleId":"46","severity":1,"message":"56","line":15,"column":22,"nodeType":"48","messageId":"49","endLine":15,"endColumn":32},{"ruleId":"46","severity":1,"message":"57","line":15,"column":44,"nodeType":"48","messageId":"49","endLine":15,"endColumn":53},{"ruleId":"46","severity":1,"message":"58","line":15,"column":55,"nodeType":"48","messageId":"49","endLine":15,"endColumn":64},{"ruleId":"46","severity":1,"message":"59","line":15,"column":66,"nodeType":"48","messageId":"49","endLine":15,"endColumn":76},{"ruleId":"46","severity":1,"message":"60","line":15,"column":78,"nodeType":"48","messageId":"49","endLine":15,"endColumn":91},{"ruleId":"46","severity":1,"message":"61","line":17,"column":12,"nodeType":"48","messageId":"49","endLine":17,"endColumn":21},{"ruleId":"46","severity":1,"message":"62","line":29,"column":29,"nodeType":"48","messageId":"49","endLine":29,"endColumn":33},{"ruleId":"63","severity":1,"message":"64","line":91,"column":8,"nodeType":"65","endLine":91,"endColumn":10,"suggestions":"66"},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'MovesLayer' is defined but never used.","'MovesbaseOperation' is defined but never used.","'DepotsLayer' is defined but never used.","'DepotsData' is defined but never used.","'LineMapLayer' is defined but never used.","'LineMapData' is defined but never used.","'depotsData' is assigned a value but never used.","'movesbase' is assigned a value but never used.","'movedData' is assigned a value but never used.","'routePaths' is assigned a value but never used.","'clickedObject' is assigned a value but never used.","'movesdata' is assigned a value but never used.","'type' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'actions', 'props.viewport', and 'setAgents'. Either include them or remove the dependency array.","ArrayExpression",["69"],"no-global-assign","no-unsafe-negation",{"desc":"70","fix":"71"},"Update the dependencies array to be: [actions, props.viewport, setAgents]",{"range":"72","text":"73"},[3434,3436],"[actions, props.viewport, setAgents]"]